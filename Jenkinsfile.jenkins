// gets list of currently supported cloud providers from available folders
def findProviders(path){
    def dirs = []
    //get files from root dir, and loop over them to find relevant dirs
    new File(path).listFiles().each { file ->
        if (file.isDirectory()) {
            dirs.add(file.getName())
        }
    }
    return dirs
}

//global parameter for provider choice
def provider

// vault config
def configuration = [engineVersion: 2,
                     skipSslVerification: true,
                     timeout: 60,
                     vaultCredentialId: 'jenkins-vault-app-role',
                     vaultUrl: 'http://vault.consolenetwork.com:8200']

def secrets = [[engineVersion: 2,
                path: '/kv/azure-sp',
                secretValues: [
                    [envVar: 'ARM_CLIENT_ID', vaultKey: 'client_id'],
                    [envVar: 'ARM_CLIENT_SECRET', vaultKey: 'client_secret'],
                    [envVar: 'ARM_SUBSCRIPTION_ID', vaultKey: 'subscription_id'],
                    [envVar: 'ARM_TENANT_ID', vaultKey: 'tenant_id']
                    ]
                ]]

pipeline {

    // agents to run on
    agent any

    // set build parameters
    //parameters{
    //    choice(name: 'provider', choices: findDirectories('.') , description:'select a cloud provider to deploy to')
    //}

    // set stages
    stages {

        // checkout code from github
        stage('Checkout Code') {
            steps {
                git branch: 'master', url: 'https://github.com/castleking1810/infra-configuration.git'
            }
        }

        // find currently supported cloud providers
        stage('Choose provider') {
            steps {
                script {

                    // execute findProviders on build workspace
                    def providers = findProviders(pwd())

                    // prompt user for cloud deployment target, using the providers list generated
                    provider = input(
                        id: 'provider',
                        message: 'Choose a cloud provider to deploy its managed k8s service:',
                        parameters: [choice(choices: providers, name: 'Provider')]
                    )
                }
            }
        }
        //stage('import tf env variables'){
        //    steps{
        //        sh '. /etc/cicd/tf/sp.env'
        //    }
        //}
        stage('plan deplyoment') {
            steps {
                dir(provider) {
                    withVault(configuration: configuration, vaultSecrets: secrets) {
                        sh 'terraform init -upgrade'
                        sh 'terraform plan'
                        input id: 'Approve_tf_plan', message: 'do you approve the above plan?', ok: 'approve'
                    }
                }       
                
                
            }
        }
        stage('Deploy'){
            steps{
                dir(provider){
                    withVault(configuration: configuration, vaultSecrets: secrets) {
                        sh 'terraform apply -auto-approve'
                    }
                }
            }
        }
        stage('clean workspace'){
            steps{
                cleanWs cleanWhenFailure: false, notFailBuild: true
            }
            
        }
        
    }
}
